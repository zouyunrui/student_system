library StudentDLL;

uses
  System.SysUtils,
  System.Classes,
  Data.DB,
  DBAccess,
  Uni,
  UniProvider,
  OracleUniProvider,
  MemDS;

{$R *.res}

var
  UniConnection: TUniConnection;

procedure InitializeConnection; stdcall;
begin
  UniConnection := TUniConnection.Create(nil);
  UniConnection.ProviderName := 'Oracle'; // 你使用的是 Oracle 数据库提供程序
  UniConnection.Server := '192.168.0.91:1521/orcl'; // 设置服务器地址
  UniConnection.Username := 'system';
  UniConnection.Password := '123456';
  UniConnection.Connect;

end;

procedure FinalizeConnection; stdcall;
begin
  if Assigned(UniConnection) then
  begin
    UniConnection.Disconnect;
    UniConnection.Free;
    UniConnection := nil; // 置空数据库连接对象
  end;
end;

procedure AddStudent(Id: Integer; Name: PChar; Sex: PChar; Birthday: TDateTime; IdNo: PChar; NativePlace: PChar; ContactNumber: PChar; ParentType: Integer; ParentName: PChar; ParentNumber: PChar); stdcall;
var
  UniQuery: TUniQuery;
begin
  UniQuery := TUniQuery.Create(nil);
  try
    UniQuery.Connection := UniConnection;
    UniQuery.SQL.Text := 'INSERT INTO Student (id, name, sex, birthday, id_no, native_place, contact_number, parent_type, parent_name, parent_number) VALUES (:id, :name, :sex, :birthday, :id_no, :native_place, :contact_number, :parent_type, :parent_name, :parent_number)';
    UniQuery.ParamByName('id').AsInteger := Id;
    UniQuery.ParamByName('name').AsString := string(Name);
    UniQuery.ParamByName('sex').AsString := string(Sex);
    UniQuery.ParamByName('birthday').AsDateTime := Birthday;
    UniQuery.ParamByName('id_no').AsString := string(IdNo);
    UniQuery.ParamByName('native_place').AsString := string(NativePlace);
    UniQuery.ParamByName('contact_number').AsString := string(ContactNumber);
    UniQuery.ParamByName('parent_type').AsInteger := ParentType;
    UniQuery.ParamByName('parent_name').AsString := string(ParentName);
    UniQuery.ParamByName('parent_number').AsString := string(ParentNumber);
    UniQuery.ExecSQL;
  finally
    UniQuery.Free;
  end;
end;
//

procedure UpdateStudent(Id: Integer; Name: PChar; Sex: PChar; Birthday: TDateTime; IdNo: PChar; NativePlace: PChar; ContactNumber: PChar; ParentType: Integer; ParentName: PChar; ParentNumber: PChar); stdcall;
var
  UniQuery: TUniQuery;
begin
  UniQuery := TUniQuery.Create(nil);
  try
    UniQuery.Connection := UniConnection;
    UniQuery.SQL.Text := 'UPDATE Student SET name = :name, sex = :sex, birthday = :birthday, id_no = :id_no, native_place = :native_place, contact_number = :contact_number, parent_type = :parent_type, parent_name = :parent_name, parent_number = :parent_number WHERE id = :id';
    UniQuery.ParamByName('id').AsInteger := Id;
    UniQuery.ParamByName('name').AsString := string(Name);
    UniQuery.ParamByName('sex').AsString := string(Sex);
    UniQuery.ParamByName('birthday').AsDateTime := Birthday;
    UniQuery.ParamByName('id_no').AsString := string(IdNo);
    UniQuery.ParamByName('native_place').AsString := string(NativePlace);
    UniQuery.ParamByName('contact_number').AsString := string(ContactNumber);
    UniQuery.ParamByName('parent_type').AsInteger := ParentType;
    UniQuery.ParamByName('parent_name').AsString := string(ParentName);
    UniQuery.ParamByName('parent_number').AsString := string(ParentNumber);
    UniQuery.ExecSQL;
  finally
    UniQuery.Free;
  end;
end;

procedure DeleteStudent(Id: string); stdcall;
var
  UniQuery: TUniQuery;
begin
  InitializeConnection();
  UniQuery := TUniQuery.Create(nil);
  try
    UniQuery.Connection := UniConnection;
    UniQuery.SQL.Text := 'DELETE FROM Student WHERE id = :id';
    UniQuery.ParamByName('id').AsString := Id;
    UniQuery.ExecSQL;
  finally
    UniQuery.Free;
  end;
end;

procedure QueryStudent(Id: PAnsiChar; var Name, Sex, IdNo, NativePlace, ContactNumber, ParentType, ParentName, ParentNumber: PAnsiChar; var Birthday, CreateTimeB, CreateTimeE, LastTimeB, LastTimeE: TDateTime); stdcall;
var
  UniQuery: TUniQuery;
begin
  InitializeConnection();
  UniQuery := TUniQuery.Create(nil);
  try
    UniQuery.Connection := UniConnection;
    UniQuery.SQL.Text := 'SELECT * FROM Student WHERE 1=1';

    if Id <> '' then
      UniQuery.SQL.Text := UniQuery.SQL.Text + ' AND id = :id';

    if Name <> '' then
      UniQuery.SQL.Text := UniQuery.SQL.Text + ' AND name LIKE :Name';

    if Sex <> '' then
      UniQuery.SQL.Text := UniQuery.SQL.Text + ' AND sex = :Sex';

    if Birthday <> 0 then
      UniQuery.SQL.Text := UniQuery.SQL.Text + ' AND birthday = :Birthday';

    if IdNo <> '' then
      UniQuery.SQL.Text := UniQuery.SQL.Text + ' AND id_no = :IdNo';

    if NativePlace <> '' then
      UniQuery.SQL.Text := UniQuery.SQL.Text + ' AND native_place = :NativePlace';

    if ContactNumber <> '' then
      UniQuery.SQL.Text := UniQuery.SQL.Text + ' AND contact_number = :ContactNumber';

    if ParentType <> '' then
      UniQuery.SQL.Text := UniQuery.SQL.Text + ' AND parent_type = :ParentType';

    if ParentName <> '' then
      UniQuery.SQL.Text := UniQuery.SQL.Text + ' AND parent_name LIKE :ParentName';

    if ParentNumber <> '' then
      UniQuery.SQL.Text := UniQuery.SQL.Text + ' AND parent_number = :ParentNumber';

    if (CreateTimeB <> 0) and (CreateTimeE <> 0) then
      UniQuery.SQL.Text := UniQuery.SQL.Text + ' AND create_time BETWEEN :CreateTimeB AND :CreateTimeE';

    if (LastTimeB <> 0) and (LastTimeE <> 0) then
      UniQuery.SQL.Text := UniQuery.SQL.Text + ' AND last_time BETWEEN :LastTimeB AND :LastTimeE';

// Set parameter values
    UniQuery.ParamByName('id').AsString := Id;
    UniQuery.ParamByName('Name').AsString := '%' + Name + '%';
    UniQuery.ParamByName('Sex').AsString := Sex;
    UniQuery.ParamByName('Birthday').AsDateTime := Birthday;
    UniQuery.ParamByName('IdNo').AsString := IdNo;
    UniQuery.ParamByName('NativePlace').AsString := NativePlace;
    UniQuery.ParamByName('ContactNumber').AsString := ContactNumber;
    UniQuery.ParamByName('ParentType').AsInteger := ParentType;
    UniQuery.ParamByName('ParentName').AsString := '%' + ParentName + '%';
    UniQuery.ParamByName('ParentNumber').AsString := ParentNumber;
    UniQuery.ParamByName('CreateTimeB').AsDateTime := CreateTimeB;
    UniQuery.ParamByName('CreateTimeE').AsDateTime := CreateTimeE;
    UniQuery.ParamByName('LastTimeB').AsDateTime := LastTimeB;
    UniQuery.ParamByName('LastTimeE').AsDateTime := LastTimeE;
  finally
    UniQuery.Free;
  end;
end;

exports
  InitializeConnection,
  FinalizeConnection,
  AddStudent,
  UpdateStudent,
  DeleteStudent,
  QueryStudent;

begin
end.

